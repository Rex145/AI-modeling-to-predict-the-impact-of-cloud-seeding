import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
df = pd.read_csv('/content/dataset_2196_cloud - dataset_2196_cloud (9).csv')
df = df.dropna()

from sklearn.model_selection import train_test_split

X = np.array(df['NC']).reshape(-1, 1)
Y = np.array(df['temperature_rain']).reshape(-1, 1)

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import BatchNormalization

model = Sequential()
model.add(BatchNormalization(1))
model.add(Dropout(0.1))
model.add(Dense(2048, activation=tf.nn.relu))
model.add(Dropout(0.1))
model.add(Dense(1024, activation=tf.nn.relu))
model.add(Dense(512, activation=tf.nn.relu))
model.add(Dense(256, activation=tf.nn.relu))
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dense(64, activation=tf.nn.relu))
model.add(Dense(32, activation=tf.nn.relu))
model.add(Dense(16, activation=tf.nn.relu))
model.add(Dense(8, activation=tf.nn.relu))
model.add(Dense(4, activation=tf.nn.relu))
model.add(Dropout(0.1))
model.add(Dense(2, activation=tf.nn.relu))
model.add(Dropout(0.1))
model.add(Dense(1, activation=tf.nn.relu))
model.add(Dropout(0.1))

model.compile(optimizer="adam", loss="mse")

history = model.fit(X_train, y_train, epochs=15, validation_data=(X_test, y_test))

test_loss = model.evaluate(X_test, y_test)
print("Test loss: ", test_loss)

from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import BatchNormalization

X = np.array(df['SC']).reshape(-1, 1)
Y = np.array(df['temperature_rain']).reshape(-1, 1)

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)


model = Sequential()
model.add(BatchNormalization(1))
model.add(Dropout(0.1))
model.add(Dense(2048, activation=tf.nn.relu))
model.add(Dense(1024, activation=tf.nn.relu))
model.add(Dense(512, activation=tf.nn.relu))
model.add(Dense(256, activation=tf.nn.relu))
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dense(64, activation=tf.nn.relu))
model.add(Dense(32, activation=tf.nn.relu))
model.add(Dense(16, activation=tf.nn.relu))
model.add(Dense(8, activation=tf.nn.relu))
model.add(Dense(4, activation=tf.nn.relu))
model.add(Dense(2, activation=tf.nn.relu))
model.add(Dense(1, activation=tf.nn.relu))

model.compile(optimizer="adam", loss="mse")

history = model.fit(X_train, y_train, epochs=15, validation_data=(X_test, y_test))
